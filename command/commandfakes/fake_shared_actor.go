// This file was generated by counterfeiter
package commandfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/sharedaction"
	"code.cloudfoundry.org/cli/command"
)

type FakeSharedActor struct {
	CheckTargetStub        func(config sharedaction.Config, targetedOrganizationRequired bool, targetedSpaceRequired bool) error
	checkTargetMutex       sync.RWMutex
	checkTargetArgsForCall []struct {
		config                       sharedaction.Config
		targetedOrganizationRequired bool
		targetedSpaceRequired        bool
	}
	checkTargetReturns struct {
		result1 error
	}
	checkTargetReturnsOnCall map[int]struct {
		result1 error
	}
	UninstallPluginStub        func(config sharedaction.Config, uninstaller sharedaction.PluginUninstaller, name string) error
	uninstallPluginMutex       sync.RWMutex
	uninstallPluginArgsForCall []struct {
		config      sharedaction.Config
		uninstaller sharedaction.PluginUninstaller
		name        string
	}
	uninstallPluginReturns struct {
		result1 error
	}
	uninstallPluginReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSharedActor) CheckTarget(config sharedaction.Config, targetedOrganizationRequired bool, targetedSpaceRequired bool) error {
	fake.checkTargetMutex.Lock()
	ret, specificReturn := fake.checkTargetReturnsOnCall[len(fake.checkTargetArgsForCall)]
	fake.checkTargetArgsForCall = append(fake.checkTargetArgsForCall, struct {
		config                       sharedaction.Config
		targetedOrganizationRequired bool
		targetedSpaceRequired        bool
	}{config, targetedOrganizationRequired, targetedSpaceRequired})
	fake.recordInvocation("CheckTarget", []interface{}{config, targetedOrganizationRequired, targetedSpaceRequired})
	fake.checkTargetMutex.Unlock()
	if fake.CheckTargetStub != nil {
		return fake.CheckTargetStub(config, targetedOrganizationRequired, targetedSpaceRequired)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.checkTargetReturns.result1
}

func (fake *FakeSharedActor) CheckTargetCallCount() int {
	fake.checkTargetMutex.RLock()
	defer fake.checkTargetMutex.RUnlock()
	return len(fake.checkTargetArgsForCall)
}

func (fake *FakeSharedActor) CheckTargetArgsForCall(i int) (sharedaction.Config, bool, bool) {
	fake.checkTargetMutex.RLock()
	defer fake.checkTargetMutex.RUnlock()
	return fake.checkTargetArgsForCall[i].config, fake.checkTargetArgsForCall[i].targetedOrganizationRequired, fake.checkTargetArgsForCall[i].targetedSpaceRequired
}

func (fake *FakeSharedActor) CheckTargetReturns(result1 error) {
	fake.CheckTargetStub = nil
	fake.checkTargetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSharedActor) CheckTargetReturnsOnCall(i int, result1 error) {
	fake.CheckTargetStub = nil
	if fake.checkTargetReturnsOnCall == nil {
		fake.checkTargetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkTargetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSharedActor) UninstallPlugin(config sharedaction.Config, uninstaller sharedaction.PluginUninstaller, name string) error {
	fake.uninstallPluginMutex.Lock()
	ret, specificReturn := fake.uninstallPluginReturnsOnCall[len(fake.uninstallPluginArgsForCall)]
	fake.uninstallPluginArgsForCall = append(fake.uninstallPluginArgsForCall, struct {
		config      sharedaction.Config
		uninstaller sharedaction.PluginUninstaller
		name        string
	}{config, uninstaller, name})
	fake.recordInvocation("UninstallPlugin", []interface{}{config, uninstaller, name})
	fake.uninstallPluginMutex.Unlock()
	if fake.UninstallPluginStub != nil {
		return fake.UninstallPluginStub(config, uninstaller, name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.uninstallPluginReturns.result1
}

func (fake *FakeSharedActor) UninstallPluginCallCount() int {
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	return len(fake.uninstallPluginArgsForCall)
}

func (fake *FakeSharedActor) UninstallPluginArgsForCall(i int) (sharedaction.Config, sharedaction.PluginUninstaller, string) {
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	return fake.uninstallPluginArgsForCall[i].config, fake.uninstallPluginArgsForCall[i].uninstaller, fake.uninstallPluginArgsForCall[i].name
}

func (fake *FakeSharedActor) UninstallPluginReturns(result1 error) {
	fake.UninstallPluginStub = nil
	fake.uninstallPluginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSharedActor) UninstallPluginReturnsOnCall(i int, result1 error) {
	fake.UninstallPluginStub = nil
	if fake.uninstallPluginReturnsOnCall == nil {
		fake.uninstallPluginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uninstallPluginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSharedActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkTargetMutex.RLock()
	defer fake.checkTargetMutex.RUnlock()
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSharedActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ command.SharedActor = new(FakeSharedActor)
